#!/bin/sh

set -e

USAGE='Usage: git cococo [options] [--] <command> [args...]

Example:

    $ git cococo sed -e s/foo/bar/g *.txt
'

echo_n() {
  printf -- '%s' "$1"
}

uncommitted_changes_are_exists() {
  test -n "$(git status --short)"
}

escape_quote_argument() {
  echo_n "$1" | sed -e "s/'/'\\\\''/g"
}

escape_one_argument() {
  need_quote=
  expr "$1" : '.*[ \$\"'\'']' > /dev/null && need_quote=1

  test -z "$need_quote" || echo_n "'"
  escape_quote_argument "$1"
  test -z "$need_quote" || echo_n "'"
}

escape_command_line() {
  escape_one_argument "$1"
  shift
  for arg in "$@"
  do
    echo_n ' '
    escape_one_argument "$arg"
  done
}

git_cococo_options() {
  case "$init" in
    '') : ;;
    .) echo_n '--init ' ;;
    *) echo_n "--init=$init " ;;
  esac
}

create_commit_message() {
  echo_n 'run: git cococo '
  git_cococo_options
  escape_command_line "$@"
}

die_if_both_autostash_and_init() {
  test -n "$autostash" -a -n "$init" || return 0

  echo 'Cannot use both "--autostash" option and "--init" option.'
  exit 1
}

die_if_init_target_is_existent_or_not_empty() {
  # allow nonexistent
  test -e "$init" || return 0

  # allow empty directory
  test -n "$(find "$init" -mindepth 1 -maxdepth 1 |
             sed -e '/^\.$/ d' -e '/^\.\.$/ d')" ||
    return 0

  # disallow
  cat <<EOF
"$init" directory should be nonexistent or empty.
git cococo found following files:

$(
  # shellcheck disable=SC2012
  ls -al "$init" | sed -e 's|^|  |g'
)

Run without "--init" option:

  $ git cococo $(escape_command_line "$@")
EOF
  exit 1
}

run_git_init() {
  # do not check ".git" existent.

  git init --quiet
}

die_or_autostash_if_uncommitted_changes_are_exists() {
  stashed=
  uncommitted_changes_are_exists || return 0

  if test -z "$autostash"
  then
    cat <<EOF
Detects following uncommitted changes:

$(git status --short | sed -e 's|^|  |g')

Run "git stash" and retry "git cococo":

  $ git stash --include-untracked &&
    git cococo $(escape_command_line "$@") &&
    git stash pop

Or, use "--autostash" option:

  $ git cococo --autostash $(escape_command_line "$@")
EOF
    exit 1
  fi

  git stash --quiet --include-untracked
  stashed=1
}

commit_uncommitted_changes() {
  if uncommitted_changes_are_exists
  then
    git add --all
    create_commit_message "$@" | git commit --quiet --file=-
  else
    echo No changes are detected.
  fi
}

pop_stash_if_autostashed() {
  test -n "$stashed" || return 0

  # If only untracked files, always output "Already up to date!".
  #
  # https://github.com/git/git/blob/v2.15.0/merge-recursive.c#L1954
  git stash pop --quiet | sed -e '/^Already up to date!$/ d'
}

run_in_init_mode() {
  die_if_init_target_is_existent_or_not_empty "$@"
  "$@" # run command.
  cd "$init"
  run_git_init "$@"
  commit_uncommitted_changes "$@"
}

run_in_git_work_directory() {
  die_or_autostash_if_uncommitted_changes_are_exists "$@"
  "$@" # run command.
  commit_uncommitted_changes "$@"
  pop_stash_if_autostashed "$@"
}

main() {
  # parse git cococo options.
  autostash=
  init=
  while :
  do
    case "$1" in
      --autostash)
        autostash=1
        ;;
      --init)
        init=.
        ;;
      --init=*)
        init=$(echo "$1" | sed -e 's/.*=//')
        ;;
      -h|--help)
        echo_n "$USAGE"
        exit
        ;;
      --)
        shift
        break
        ;;
      '')
        echo_n "$USAGE" 1>&2
        exit 1
        ;;
      *)
        break
        ;;
    esac
    shift
  done
  die_if_both_autostash_and_init

  if test -n "$init"
  then
    run_in_init_mode "$@"
  else
    run_in_git_work_directory "$@"
  fi
}

main "$@"
